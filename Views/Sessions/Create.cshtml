@model StudyGroups.Models.Session
@{
    ViewBag.Title = "Create Session";
    bool isStudyGroupLocked = ViewBag.IsStudyGroupLocked != null && (bool)ViewBag.IsStudyGroupLocked;
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <h2 class="mb-4">Create Session</h2>

            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <strong>Error!</strong> @TempData["Error"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (ViewBag.StudyGroupName != null)
            {
                <div class="alert alert-info">
                    <strong>Creating session for:</strong> @ViewBag.StudyGroupName
                    <br />
                    <strong>Subject:</strong> @ViewBag.SubjectTitle
                </div>
            }

            <div class="card shadow-sm border-0">
                <div class="card-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger mb-3" })

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Date, new { @class = "form-label" })
                            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", type = "datetime-local" } })
                            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger small" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Duration, new { @class = "form-label" })
                            @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control", placeholder = "Duration in minutes" } })
                            @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger small" })
                            <small class="text-muted">Enter duration in minutes</small>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.MaxAttendees, new { @class = "form-label" })
                            @Html.EditorFor(model => model.MaxAttendees, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MaxAttendees, "", new { @class = "text-danger small" })
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.StudyGroupID, "Study Group", new { @class = "form-label" })
                            @if (isStudyGroupLocked)
                            {
                                <div class="form-control-plaintext">@ViewBag.StudyGroupName</div>
                                @Html.HiddenFor(model => model.StudyGroupID)
                            }
                            else
                            {
                                @Html.DropDownList("StudyGroupID", null, htmlAttributes: new { @class = "form-select" })
                                @Html.ValidationMessageFor(model => model.StudyGroupID, "", new { @class = "text-danger small" })
                            }
                        </div>

                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary">Create</button>
                            @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-outline-secondary" })
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}