@model StudyGroups.Models.Session
@{
    ViewBag.Title = "Details";
    int? currentUserID = Session["UserID"] as int?;
    bool isCreator = currentUserID.HasValue && Model.CreatorUserID == currentUserID.Value;
    bool isAttending = currentUserID.HasValue && Model.Attendees != null && Model.Attendees.Any(a => a.UserID == currentUserID.Value);
    bool isFull = Model.Attendees != null && Model.Attendees.Count >= Model.MaxAttendees;
}

<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
    <h2>Session Details</h2>
    <div>
        @if (currentUserID.HasValue)
        {
            if (isCreator)
            {
                @Html.ActionLink("Edit", "Edit", new { id = Model.SessionID }, new { @class = "btn btn-default" })
                <text> | </text>
            }
            else if (isAttending)
            {
                using (Html.BeginForm("Leave", "Sessions", new { id = Model.SessionID }, FormMethod.Post, new { style = "display:inline;" }))
                {
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-warning" onclick="return confirm('Are you sure you want to leave this session?');">Leave Session</button>
                }
                <text> | </text>
            }
            else if (isFull)
            {
                <button type="button" class="btn btn-default" disabled>Session Full</button>
                <text> | </text>
            }
            else
            {
                using (Html.BeginForm("Join", "Sessions", new { id = Model.SessionID }, FormMethod.Post, new { style = "display:inline;" }))
                {
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-success">Join Session</button>
                }
                <text> | </text>
            }
        }
        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success">
        @TempData["Success"]
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">
        @TempData["Error"]
    </div>
}

<div>
    <h4>Session Information</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Creator.FirstName)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Creator.FirstName) @Html.DisplayFor(model => model.Creator.LastName)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.StudyGroup.Name)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.StudyGroup.Name)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Date)
        </dt>
        <dd>
            @Model.Date.ToString("MM/dd/yyyy HH:mm")
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Duration)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Duration) minutes
        </dd>
        <dt>
            Attendees
        </dt>
        <dd>
            @(Model.Attendees?.Count ?? 0) / @Model.MaxAttendees
        </dd>
    </dl>
</div>

@* Attendees List *@
@if (Model.Attendees != null && Model.Attendees.Any())
{
    <div style="margin-top: 30px;">
        <h4>Attendees</h4>
        <hr />
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var attendee in Model.Attendees)
                {
                    <tr>
                        <td>@attendee.FirstName @attendee.LastName</td>
                        <td>@attendee.Email</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@* Rating Section *@
@if (ViewBag.HasSessionEnded)
{
    <div style="margin-top: 30px; padding: 20px; background-color: #f9f9f9; border-radius: 5px;">
        <h4>Rate This Session</h4>
        <hr />

        @if (Session["UserID"] == null)
        {
            <p class="text-muted">Please log in to rate this session.</p>
        }
        else if (ViewBag.HasAlreadyRated)
        {
            <div class="alert alert-info">
                You have already rated this session.
            </div>
        }
        else if (ViewBag.CanRate)
        {
            using (Html.BeginForm("CreateFromSession", "Ratings", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.Hidden("sessionId", Model.SessionID)

                <div class="form-group">
                    <label for="score">Your Rating (1-5 stars):</label>
                    <select name="score" id="score" class="form-control" style="width: 200px;" required>
                        <option value="">Select rating...</option>
                        <option value="1">⭐ 1 - Poor</option>
                        <option value="2">⭐⭐ 2 - Fair</option>
                        <option value="3">⭐⭐⭐ 3 - Good</option>
                        <option value="4">⭐⭐⭐⭐ 4 - Very Good</option>
                        <option value="5">⭐⭐⭐⭐⭐ 5 - Excellent</option>
                    </select>
                </div>

                <button type="submit" class="btn btn-primary">Submit Rating</button>
            }
        }
        else
        {
            <div class="alert alert-warning">
                Only the session creator and attendees can leave ratings.
            </div>
        }
    </div>
}
else
{
    <div style="margin-top: 30px; padding: 15px; background-color: #fff3cd; border-radius: 5px;">
        <p class="text-muted">
            <strong>Note:</strong> Ratings can be submitted after the session ends.
        </p>
    </div>
}

@* Display existing ratings *@
@if (Model.Ratings != null && Model.Ratings.Any())
{
    <div style="margin-top: 30px;">
        <h4>Session Ratings</h4>
        <hr />
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>User</th>
                    <th>Rating</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var rating in Model.Ratings)
                {
                    <tr>
                        <td>@rating.User.FirstName @rating.User.LastName</td>
                        <td>
                            @for (int i = 0; i < rating.Score; i++)
                            {
                                <span>⭐</span>
                            }
                            <span>(@rating.Score/5)</span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (Model.Ratings.Count > 0)
        {
            var averageRating = Model.Ratings.Average(r => r.Score);
            <p><strong>Average Rating:</strong> @averageRating.ToString("F1") / 5.0 ⭐</p>
        }
    </div>
}