@model IEnumerable<StudyGroups.Models.StudyGroup>
@{
    ViewBag.Title = "Study Groups";
    string currentFilter = ViewBag.CurrentFilter ?? "all";
    string searchString = ViewBag.SearchString;
    int? currentUserID = Session["UserID"] as int?;
    int? subjectId = ViewBag.SubjectId;
    int currentPage = ViewBag.CurrentPage ?? 1;
    int totalPages = ViewBag.TotalPages ?? 1;
    int totalItems = ViewBag.TotalItems ?? 0;
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-lg-11">

            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">Study Groups</h2>
                @if (Session["UserID"] != null && Session["UserRole"]?.ToString() == "User")
                {
                    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-primary" })
                }
            </div>

            @if (Session["UserID"] != null)
            {
                <ul class="nav nav-tabs mb-4">
                    <li class="nav-item">
                        @Html.ActionLink("All Groups", "Index", new { filter = "all", searchString = searchString }, new { @class = currentFilter == "all" ? "nav-link active" : "nav-link" })
                    </li>
                    <li class="nav-item">
                        @Html.ActionLink("Created by Me", "Index", new { filter = "created", searchString = searchString }, new { @class = currentFilter == "created" ? "nav-link active" : "nav-link" })
                    </li>
                    <li class="nav-item">
                        @Html.ActionLink("Joined Groups", "Index", new { filter = "joined", searchString = searchString }, new { @class = currentFilter == "joined" ? "nav-link active" : "nav-link" })
                    </li>
                    <li class="nav-item">
                        @Html.ActionLink("Available Groups", "Index", new { filter = "available", searchString = searchString }, new { @class = currentFilter == "available" ? "nav-link active" : "nav-link" })
                    </li>
                </ul>
            }

            @using (Html.BeginForm("Index", "StudyGroups", FormMethod.Get))
            {
                <input type="hidden" name="filter" value="@currentFilter" />

                <div class="row mb-4 g-2">
                    <div class="col-md-5">
                        <input type="text"
                               name="searchString"
                               value="@searchString"
                               class="form-control"
                               placeholder="Search by name, description, or subject..." />
                    </div>

                    <div class="col-md-3">
                        @Html.DropDownList("subjectId", (SelectList)ViewBag.Subjects, "All Subjects", new { @class = "form-control" })
                    </div>

                    <div class="col-md-4">
                        <button type="submit" class="btn btn-primary">
                            <span class="glyphicon glyphicon-search"></span> Search
                        </button>
                        @if (!String.IsNullOrEmpty(searchString) || (subjectId.HasValue && subjectId.Value > 0))
                        {
                            @Html.ActionLink("Clear", "Index", new { filter = currentFilter }, new { @class = "btn btn-outline-secondary ms-2" })
                        }
                    </div>
                </div>
            }

            <div class="mb-3">
                <strong>Showing @Model.Count() of @totalItems study groups</strong>
            </div>

            <div class="row g-3">
                @foreach (var item in Model)
                {
                    bool isCreator = currentUserID.HasValue && item.CreatorUserID == currentUserID.Value;
                    bool isMember = currentUserID.HasValue && item.Members != null && item.Members.Any(m => m.UserID == currentUserID.Value);

                    <div class="col-md-6 col-lg-4">
                        <div class="card shadow-sm border-0 h-100">
                            <div class="card-body">

                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <h5 class="card-title mb-0">@item.Name</h5>
                                    @if (isCreator)
                                    {
                                        <span class="badge bg-primary">Creator</span>
                                    }
                                    else if (isMember)
                                    {
                                        <span class="badge bg-success">Member</span>
                                    }
                                </div>

                                <p class="text-muted small mb-3">
                                    @if (!string.IsNullOrEmpty(item.Description))
                                    {
                                        if (item.Description.Length > 80)
                                        {
                                            @(item.Description.Substring(0, 80) + "...")
                                        }
                                        else
                                        {
                                            @item.Description
                                        }
                                    }
                                    else
                                    {
                                        <em>No description</em>
                                    }
                                </p>

                                <div class="d-flex align-items-center mb-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-book text-primary me-2" viewBox="0 0 16 16">
                                        <path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z" />
                                    </svg>
                                    <small class="text-muted">@item.Subject.Title</small>
                                </div>

                                <div class="d-flex align-items-center mb-3">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-people text-primary me-2" viewBox="0 0 16 16">
                                        <path d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8Zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022ZM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816ZM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275ZM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0Zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4Z" />
                                    </svg>
                                    <small class="text-muted">@(item.Members?.Count ?? 0) members</small>
                                </div>

                                <div class="d-flex align-items-center mb-2">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person text-primary me-2" viewBox="0 0 16 16">
                                        <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z" />
                                    </svg>
                                    <small class="text-muted">Created by @item.Creator.FirstName @item.Creator.LastName</small>
                                </div>

                            </div>

                            <div class="card-footer bg-white border-0">
                                @if (currentUserID.HasValue)
                                {
                                    if (isCreator)
                                    {
                                        <div class="d-flex gap-2">
                                            @Html.ActionLink("Details", "Details", new { id = item.StudyGroupID }, new { @class = "btn btn-sm btn-primary flex-fill" })
                                            @Html.ActionLink("Edit", "Edit", new { id = item.StudyGroupID }, new { @class = "btn btn-sm btn-warning flex-fill" })
                                            @Html.ActionLink("Delete", "Delete", new { id = item.StudyGroupID }, new { @class = "btn btn-sm btn-danger flex-fill" })
                                        </div>
                                    }
                                    else if (isMember)
                                    {
                                        <div class="d-flex gap-2">
                                            @Html.ActionLink("Details", "Details", new { id = item.StudyGroupID }, new { @class = "btn btn-sm btn-primary flex-fill" })
                                            @{
                                                using (Html.BeginForm("Leave", "StudyGroups", new { id = item.StudyGroupID }, FormMethod.Post, new { @class = "flex-fill" }))
                                                {
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-sm btn-outline-danger w-100" onclick="return confirm('Are you sure you want to leave this study group?');">Leave</button>
                                                }
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="d-flex gap-2">
                                            @Html.ActionLink("Details", "Details", new { id = item.StudyGroupID }, new { @class = "btn btn-sm btn-primary flex-fill" })
                                            @{
                                                using (Html.BeginForm("Join", "StudyGroups", new { id = item.StudyGroupID }, FormMethod.Post, new { @class = "flex-fill" }))
                                                {
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-sm btn-success w-100">Join</button>
                                                }
                                            }
                                        </div>
                                    }
                                }
                            </div>

                        </div>
                    </div>
                }
            </div>

            @if (totalPages > 1)
            {
                <nav aria-label="Study groups pagination" class="mt-4">
                    <ul class="pagination justify-content-center">

                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            @if (currentPage == 1)
                            {
                                <span class="page-link">&laquo; Previous</span>
                            }
                            else
                            {
                                @Html.ActionLink("« Previous", "Index", new { page = currentPage - 1, filter = currentFilter, searchString = searchString, subjectId = subjectId }, new { @class = "page-link" })
                            }
                        </li>

                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                @Html.ActionLink(i.ToString(), "Index", new { page = i, filter = currentFilter, searchString = searchString, subjectId = subjectId }, new { @class = "page-link" })
                            </li>
                        }

                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            @if (currentPage == totalPages)
                            {
                                <span class="page-link">Next &raquo;</span>
                            }
                            else
                            {
                                @Html.ActionLink("Next »", "Index", new { page = currentPage + 1, filter = currentFilter, searchString = searchString, subjectId = subjectId }, new { @class = "page-link" })
                            }
                        </li>

                    </ul>
                </nav>
            }

        </div>
    </div>
</div>